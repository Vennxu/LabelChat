package com.ekuater.labelchat.coreservice.systempush.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ekuater.labelchat.coreservice.systempush.dao.DBSystemPush;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBSYSTEM_PUSH.
*/
public class DBSystemPushDao extends AbstractDao<DBSystemPush, Long> {

    public static final String TABLENAME = "DBSYSTEM_PUSH";

    /**
     * Properties of entity DBSystemPush.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id", TABLENAME);
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT", TABLENAME);
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME", TABLENAME);
        public final static Property State = new Property(3, Integer.class, "state", false, "STATE", TABLENAME);
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE", TABLENAME);
        public final static Property Flag = new Property(5, String.class, "flag", false, "FLAG", TABLENAME);
    };


    public DBSystemPushDao(DaoConfig config) {
        super(config);
    }
    
    public DBSystemPushDao(DaoConfig config, DBSystemPushSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBSYSTEM_PUSH' (" + //
                "'_id' INTEGER PRIMARY KEY ASC ," + // 0: id
                "'CONTENT' TEXT," + // 1: content
                "'TIME' INTEGER," + // 2: time
                "'STATE' INTEGER," + // 3: state
                "'TYPE' INTEGER," + // 4: type
                "'FLAG' TEXT);"); // 5: flag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBSYSTEM_PUSH'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBSystemPush entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(4, state);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(6, flag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBSystemPush readEntity(Cursor cursor, int offset) {
        DBSystemPush entity = new DBSystemPush( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // flag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBSystemPush entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setState(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFlag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBSystemPush entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBSystemPush entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
