package com.ekuater.labelchat.coreservice.strangers.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ekuater.labelchat.coreservice.strangers.dao.DBStranger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBSTRANGER.
*/
public class DBStrangerDao extends AbstractDao<DBStranger, Long> {

    public static final String TABLENAME = "DBSTRANGER";

    /**
     * Properties of entity DBStranger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id", TABLENAME);
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID", TABLENAME);
        public final static Property LabelCode = new Property(2, String.class, "labelCode", false, "LABEL_CODE", TABLENAME);
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME", TABLENAME);
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE", TABLENAME);
        public final static Property Gender = new Property(5, Integer.class, "gender", false, "GENDER", TABLENAME);
        public final static Property Birthday = new Property(6, Long.class, "birthday", false, "BIRTHDAY", TABLENAME);
        public final static Property Age = new Property(7, Integer.class, "age", false, "AGE", TABLENAME);
        public final static Property Constellation = new Property(8, Integer.class, "constellation", false, "CONSTELLATION", TABLENAME);
        public final static Property Province = new Property(9, String.class, "province", false, "PROVINCE", TABLENAME);
        public final static Property City = new Property(10, String.class, "city", false, "CITY", TABLENAME);
        public final static Property School = new Property(11, String.class, "school", false, "SCHOOL", TABLENAME);
        public final static Property Signature = new Property(12, String.class, "signature", false, "SIGNATURE", TABLENAME);
        public final static Property Avatar = new Property(13, String.class, "avatar", false, "AVATAR", TABLENAME);
        public final static Property AvatarThumb = new Property(14, String.class, "avatarThumb", false, "AVATAR_THUMB", TABLENAME);
        public final static Property Labels = new Property(15, String.class, "labels", false, "LABELS", TABLENAME);
        public final static Property Location = new Property(16, String.class, "location", false, "LOCATION", TABLENAME);
    };


    public DBStrangerDao(DaoConfig config) {
        super(config);
    }
    
    public DBStrangerDao(DaoConfig config, DBStrangerSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBSTRANGER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL UNIQUE ," + // 1: userId
                "'LABEL_CODE' TEXT NOT NULL UNIQUE ," + // 2: labelCode
                "'NICKNAME' TEXT," + // 3: nickname
                "'MOBILE' TEXT," + // 4: mobile
                "'GENDER' INTEGER," + // 5: gender
                "'BIRTHDAY' INTEGER," + // 6: birthday
                "'AGE' INTEGER," + // 7: age
                "'CONSTELLATION' INTEGER," + // 8: constellation
                "'PROVINCE' TEXT," + // 9: province
                "'CITY' TEXT," + // 10: city
                "'SCHOOL' TEXT," + // 11: school
                "'SIGNATURE' TEXT," + // 12: signature
                "'AVATAR' TEXT," + // 13: avatar
                "'AVATAR_THUMB' TEXT," + // 14: avatarThumb
                "'LABELS' TEXT," + // 15: labels
                "'LOCATION' TEXT);"); // 16: location
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBSTRANGER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBStranger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getLabelCode());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(5, mobile);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(6, gender);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(7, birthday);
        }
 
        Integer age = entity.getAge();
        if (age != null) {
            stmt.bindLong(8, age);
        }
 
        Integer constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindLong(9, constellation);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(10, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(11, city);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(12, school);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(13, signature);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(14, avatar);
        }
 
        String avatarThumb = entity.getAvatarThumb();
        if (avatarThumb != null) {
            stmt.bindString(15, avatarThumb);
        }
 
        String labels = entity.getLabels();
        if (labels != null) {
            stmt.bindString(16, labels);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(17, location);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBStranger readEntity(Cursor cursor, int offset) {
        DBStranger entity = new DBStranger( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // labelCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mobile
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // birthday
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // age
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // constellation
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // province
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // city
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // school
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // signature
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // avatar
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // avatarThumb
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // labels
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // location
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBStranger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setLabelCode(cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMobile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBirthday(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setAge(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setConstellation(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setProvince(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCity(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSchool(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSignature(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAvatar(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAvatarThumb(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLabels(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLocation(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBStranger entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBStranger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
