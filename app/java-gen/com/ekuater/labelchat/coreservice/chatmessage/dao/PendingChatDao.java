package com.ekuater.labelchat.coreservice.chatmessage.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ekuater.labelchat.coreservice.chatmessage.dao.PendingChat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PENDING_CHAT.
*/
public class PendingChatDao extends AbstractDao<PendingChat, Long> {

    public static final String TABLENAME = "PENDING_CHAT";

    /**
     * Properties of entity PendingChat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id", TABLENAME);
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE", TABLENAME);
        public final static Property ConversationType = new Property(2, int.class, "conversationType", false, "CONVERSATION_TYPE", TABLENAME);
        public final static Property State = new Property(3, int.class, "state", false, "STATE", TABLENAME);
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT", TABLENAME);
        public final static Property Preview = new Property(5, String.class, "preview", false, "PREVIEW", TABLENAME);
        public final static Property Time = new Property(6, long.class, "time", false, "TIME", TABLENAME);
        public final static Property TargetId = new Property(7, String.class, "targetId", false, "TARGET_ID", TABLENAME);
        public final static Property SenderId = new Property(8, String.class, "senderId", false, "SENDER_ID", TABLENAME);
        public final static Property MessageId = new Property(9, String.class, "messageId", false, "MESSAGE_ID", TABLENAME);
        public final static Property Direction = new Property(10, int.class, "direction", false, "DIRECTION", TABLENAME);
    };


    public PendingChatDao(DaoConfig config) {
        super(config);
    }
    
    public PendingChatDao(DaoConfig config, PendingChatSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PENDING_CHAT' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' INTEGER NOT NULL ," + // 1: type
                "'CONVERSATION_TYPE' INTEGER NOT NULL ," + // 2: conversationType
                "'STATE' INTEGER NOT NULL ," + // 3: state
                "'CONTENT' TEXT," + // 4: content
                "'PREVIEW' TEXT," + // 5: preview
                "'TIME' INTEGER NOT NULL ," + // 6: time
                "'TARGET_ID' TEXT NOT NULL ," + // 7: targetId
                "'SENDER_ID' TEXT," + // 8: senderId
                "'MESSAGE_ID' TEXT," + // 9: messageId
                "'DIRECTION' INTEGER NOT NULL );"); // 10: direction
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PENDING_CHAT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PendingChat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getConversationType());
        stmt.bindLong(4, entity.getState());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String preview = entity.getPreview();
        if (preview != null) {
            stmt.bindString(6, preview);
        }
        stmt.bindLong(7, entity.getTime());
        stmt.bindString(8, entity.getTargetId());
 
        String senderId = entity.getSenderId();
        if (senderId != null) {
            stmt.bindString(9, senderId);
        }
 
        String messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindString(10, messageId);
        }
        stmt.bindLong(11, entity.getDirection());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PendingChat readEntity(Cursor cursor, int offset) {
        PendingChat entity = new PendingChat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2), // conversationType
            cursor.getInt(offset + 3), // state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // preview
            cursor.getLong(offset + 6), // time
            cursor.getString(offset + 7), // targetId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // senderId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // messageId
            cursor.getInt(offset + 10) // direction
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PendingChat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setConversationType(cursor.getInt(offset + 2));
        entity.setState(cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPreview(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTime(cursor.getLong(offset + 6));
        entity.setTargetId(cursor.getString(offset + 7));
        entity.setSenderId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMessageId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDirection(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PendingChat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PendingChat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
