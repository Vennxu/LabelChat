package com.ekuater.labelchat.coreservice.litestrangers.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ekuater.labelchat.coreservice.litestrangers.dao.DBLiteStranger;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DBLITE_STRANGER.
*/
public class DBLiteStrangerDao extends AbstractDao<DBLiteStranger, Long> {

    public static final String TABLENAME = "DBLITE_STRANGER";

    /**
     * Properties of entity DBLiteStranger.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id", TABLENAME);
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID", TABLENAME);
        public final static Property LabelCode = new Property(2, String.class, "labelCode", false, "LABEL_CODE", TABLENAME);
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME", TABLENAME);
        public final static Property AvatarThumb = new Property(4, String.class, "avatarThumb", false, "AVATAR_THUMB", TABLENAME);
        public final static Property CacheTime = new Property(5, Long.class, "cacheTime", false, "CACHE_TIME", TABLENAME);
    };


    public DBLiteStrangerDao(DaoConfig config) {
        super(config);
    }
    
    public DBLiteStrangerDao(DaoConfig config, DBLiteStrangerSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DBLITE_STRANGER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' TEXT NOT NULL UNIQUE ," + // 1: userId
                "'LABEL_CODE' TEXT NOT NULL UNIQUE ," + // 2: labelCode
                "'NICKNAME' TEXT," + // 3: nickname
                "'AVATAR_THUMB' TEXT," + // 4: avatarThumb
                "'CACHE_TIME' INTEGER);"); // 5: cacheTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DBLITE_STRANGER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DBLiteStranger entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUserId());
        stmt.bindString(3, entity.getLabelCode());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        String avatarThumb = entity.getAvatarThumb();
        if (avatarThumb != null) {
            stmt.bindString(5, avatarThumb);
        }
 
        Long cacheTime = entity.getCacheTime();
        if (cacheTime != null) {
            stmt.bindLong(6, cacheTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DBLiteStranger readEntity(Cursor cursor, int offset) {
        DBLiteStranger entity = new DBLiteStranger( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // userId
            cursor.getString(offset + 2), // labelCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatarThumb
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // cacheTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DBLiteStranger entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getString(offset + 1));
        entity.setLabelCode(cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatarThumb(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCacheTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DBLiteStranger entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DBLiteStranger entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
